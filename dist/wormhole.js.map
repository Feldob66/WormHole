{
  "version": 3,
  "sources": ["../src/Wormhole.ts"],
  "sourcesContent": ["// Wormhole 0.0.\r\n// @ts-ignore-next-line\r\nvar bcModSDK = function () { \"use strict\"; const o = \"1.2.0\"; function e(o) { alert(\"Mod ERROR:\\n\" + o); const e = new Error(o); throw console.error(e), e } const t = new TextEncoder; function n(o) { return !!o && \"object\" == typeof o && !Array.isArray(o) } function r(o) { const e = new Set; return o.filter((o => !e.has(o) && e.add(o))) } const i = new Map, a = new Set; function c(o) { a.has(o) || (a.add(o), console.warn(o)) } function s(o) { const e = [], t = new Map, n = new Set; for (const r of f.values()) { const i = r.patching.get(o.name); if (i) { e.push(...i.hooks); for (const [e, a] of i.patches.entries()) t.has(e) && t.get(e) !== a && c(`ModSDK: Mod '${r.name}' is patching function ${o.name} with same pattern that is already applied by different mod, but with different pattern:\\nPattern:\\n${e}\\nPatch1:\\n${t.get(e) || \"\"}\\nPatch2:\\n${a}`), t.set(e, a), n.add(r.name) } } e.sort(((o, e) => e.priority - o.priority)); const r = function (o, e) { if (0 === e.size) return o; let t = o.toString().replaceAll(\"\\r\\n\", \"\\n\"); for (const [n, r] of e.entries()) t.includes(n) || c(`ModSDK: Patching ${o.name}: Patch ${n} not applied`), t = t.replaceAll(n, r); return (0, eval)(`(${t})`) }(o.original, t); let i = function (e) { var t, i; const a = null === (i = (t = m.errorReporterHooks).hookChainExit) || void 0 === i ? void 0 : i.call(t, o.name, n), c = r.apply(this, e); return null == a || a(), c }; for (let t = e.length - 1; t >= 0; t--) { const n = e[t], r = i; i = function (e) { var t, i; const a = null === (i = (t = m.errorReporterHooks).hookEnter) || void 0 === i ? void 0 : i.call(t, o.name, n.mod), c = n.hook.apply(this, [e, o => { if (1 !== arguments.length || !Array.isArray(e)) throw new Error(`Mod ${n.mod} failed to call next hook: Expected args to be array, got ${typeof o}`); return r.call(this, o) }]); return null == a || a(), c } } return { hooks: e, patches: t, patchesSources: n, enter: i, final: r } } function l(o, e = !1) { let r = i.get(o); if (r) e && (r.precomputed = s(r)); else { let e = window; const a = o.split(\".\"); for (let t = 0; t < a.length - 1; t++)if (e = e[a[t]], !n(e)) throw new Error(`ModSDK: Function ${o} to be patched not found; ${a.slice(0, t + 1).join(\".\")} is not object`); const c = e[a[a.length - 1]]; if (\"function\" != typeof c) throw new Error(`ModSDK: Function ${o} to be patched not found`); const l = function (o) { let e = -1; for (const n of t.encode(o)) { let o = 255 & (e ^ n); for (let e = 0; e < 8; e++)o = 1 & o ? -306674912 ^ o >>> 1 : o >>> 1; e = e >>> 8 ^ o } return ((-1 ^ e) >>> 0).toString(16).padStart(8, \"0\").toUpperCase() }(c.toString().replaceAll(\"\\r\\n\", \"\\n\")), d = { name: o, original: c, originalHash: l }; r = Object.assign(Object.assign({}, d), { precomputed: s(d), router: () => { }, context: e, contextProperty: a[a.length - 1] }), r.router = function (o) { return function (...e) { return o.precomputed.enter.apply(this, [e]) } }(r), i.set(o, r), e[r.contextProperty] = r.router } return r } function d() { for (const o of i.values()) o.precomputed = s(o) } function p() { const o = new Map; for (const [e, t] of i) o.set(e, { name: e, original: t.original, originalHash: t.originalHash, sdkEntrypoint: t.router, currentEntrypoint: t.context[t.contextProperty], hookedByMods: r(t.precomputed.hooks.map((o => o.mod))), patchedByMods: Array.from(t.precomputed.patchesSources) }); return o } const f = new Map; function u(o) { f.get(o.name) !== o && e(`Failed to unload mod '${o.name}': Not registered`), f.delete(o.name), o.loaded = !1, d() } function g(o, t) { o && \"object\" == typeof o || e(\"Failed to register mod: Expected info object, got \" + typeof o), \"string\" == typeof o.name && o.name || e(\"Failed to register mod: Expected name to be non-empty string, got \" + typeof o.name); let r = `'${o.name}'`; \"string\" == typeof o.fullName && o.fullName || e(`Failed to register mod ${r}: Expected fullName to be non-empty string, got ${typeof o.fullName}`), r = `'${o.fullName} (${o.name})'`, \"string\" != typeof o.version && e(`Failed to register mod ${r}: Expected version to be string, got ${typeof o.version}`), o.repository || (o.repository = void 0), void 0 !== o.repository && \"string\" != typeof o.repository && e(`Failed to register mod ${r}: Expected repository to be undefined or string, got ${typeof o.version}`), null == t && (t = {}), t && \"object\" == typeof t || e(`Failed to register mod ${r}: Expected options to be undefined or object, got ${typeof t}`); const i = !0 === t.allowReplace, a = f.get(o.name); a && (a.allowReplace && i || e(`Refusing to load mod ${r}: it is already loaded and doesn't allow being replaced.\\nWas the mod loaded multiple times?`), u(a)); const c = o => { let e = g.patching.get(o.name); return e || (e = { hooks: [], patches: new Map }, g.patching.set(o.name, e)), e }, s = (o, t) => (...n) => { var i, a; const c = null === (a = (i = m.errorReporterHooks).apiEndpointEnter) || void 0 === a ? void 0 : a.call(i, o, g.name); g.loaded || e(`Mod ${r} attempted to call SDK function after being unloaded`); const s = t(...n); return null == c || c(), s }, p = { unload: s(\"unload\", (() => u(g))), hookFunction: s(\"hookFunction\", ((o, t, n) => { \"string\" == typeof o && o || e(`Mod ${r} failed to patch a function: Expected function name string, got ${typeof o}`); const i = l(o), a = c(i); \"number\" != typeof t && e(`Mod ${r} failed to hook function '${o}': Expected priority number, got ${typeof t}`), \"function\" != typeof n && e(`Mod ${r} failed to hook function '${o}': Expected hook function, got ${typeof n}`); const s = { mod: g.name, priority: t, hook: n }; return a.hooks.push(s), d(), () => { const o = a.hooks.indexOf(s); o >= 0 && (a.hooks.splice(o, 1), d()) } })), patchFunction: s(\"patchFunction\", ((o, t) => { \"string\" == typeof o && o || e(`Mod ${r} failed to patch a function: Expected function name string, got ${typeof o}`); const i = l(o), a = c(i); n(t) || e(`Mod ${r} failed to patch function '${o}': Expected patches object, got ${typeof t}`); for (const [n, i] of Object.entries(t)) \"string\" == typeof i ? a.patches.set(n, i) : null === i ? a.patches.delete(n) : e(`Mod ${r} failed to patch function '${o}': Invalid format of patch '${n}'`); d() })), removePatches: s(\"removePatches\", (o => { \"string\" == typeof o && o || e(`Mod ${r} failed to patch a function: Expected function name string, got ${typeof o}`); const t = l(o); c(t).patches.clear(), d() })), callOriginal: s(\"callOriginal\", ((o, t, n) => { \"string\" == typeof o && o || e(`Mod ${r} failed to call a function: Expected function name string, got ${typeof o}`); const i = l(o); return Array.isArray(t) || e(`Mod ${r} failed to call a function: Expected args array, got ${typeof t}`), i.original.apply(null != n ? n : globalThis, t) })), getOriginalHash: s(\"getOriginalHash\", (o => { \"string\" == typeof o && o || e(`Mod ${r} failed to get hash: Expected function name string, got ${typeof o}`); return l(o).originalHash })) }, g = { name: o.name, fullName: o.fullName, version: o.version, repository: o.repository, allowReplace: i, api: p, loaded: !0, patching: new Map }; return f.set(o.name, g), Object.freeze(p) } function h() { const o = []; for (const e of f.values()) o.push({ name: e.name, fullName: e.fullName, version: e.version, repository: e.repository }); return o } let m; const y = void 0 === window.bcModSdk ? window.bcModSdk = function () { const e = { version: o, apiVersion: 1, registerMod: g, getModsInfo: h, getPatchingInfo: p, errorReporterHooks: Object.seal({ apiEndpointEnter: null, hookEnter: null, hookChainExit: null }) }; return m = e, Object.freeze(e) }() : (n(window.bcModSdk) || e(\"Failed to init Mod SDK: Name already in use\"), 1 !== window.bcModSdk.apiVersion && e(`Failed to init Mod SDK: Different version already loaded ('1.2.0' vs '${window.bcModSdk.version}')`), window.bcModSdk.version !== o && alert(`Mod SDK warning: Loading different but compatible versions ('1.2.0' vs '${window.bcModSdk.version}')\\nOne of mods you are using is using an old version of SDK. It will work for now but please inform author to update`), window.bcModSdk); return \"undefined\" != typeof exports && (Object.defineProperty(exports, \"__esModule\", { value: !0 }), exports.default = y), y }();\r\n//Bondage Club Mod Script Development Kit (1.2.0) for more info see: https://github.com/Jomshir98/bondage-club-mod-sdk\r\nconst WHver = \"0.0.8\";\r\nconst WH_API = bcModSDK.registerMod({\r\n    name: 'WH',\r\n    fullName: 'WormHole',\r\n    version: WHver,\r\n    repository: 'https://example.com/'\r\n});\r\n\r\n//Global variables initialization\r\nfunction initGlobalVars() {\r\n    window.wormHoleSearch = false;\r\n    window.teleportedByWormhole = false;\r\n    window.fixedCustomSettings = false;\r\n    window.changeDone = false;\r\n    window.serverAnswered = true;\r\n    window.oldRoomName = \"\";\r\n    window.oldRoomSpace = undefined;\r\n    window.targetedRoom = \"\";\r\n    window.WHdebugMode = false;\r\n}\r\ninitGlobalVars();\r\n\r\n// Preload Backwards Portal Image\r\nconst backwardsPortalImage = new Image();\r\nbackwardsPortalImage.src = \"https://raw.githubusercontent.com/Feldob66/WormHole/refs/heads/main/Wormholes.png\";\r\nwindow.backwardsPortalImage = backwardsPortalImage;\r\nwindow.backwardsPortalImageReady = false;\r\nbackwardsPortalImage.onload = () => window.backwardsPortalImageReady = true;\r\n\r\n// Preload Starting Portal Image\r\nconst startingPortalImage = new Image();\r\nstartingPortalImage.src = \"https://raw.githubusercontent.com/Feldob66/WormHole/refs/heads/main/Wormholes.png\";\r\nwindow.startingPortalImage = startingPortalImage;\r\nwindow.startingPortalImageReady = false;\r\nstartingPortalImage.onload = () => window.startingPortalImageReady = true;\r\n\r\n// Preload Target Portal Image\r\nconst targetPortalImage = new Image();\r\ntargetPortalImage.src = \"https://raw.githubusercontent.com/Feldob66/WormHole/refs/heads/main/Wormholes.png\";\r\nwindow.targetPortalImage = targetPortalImage;\r\nwindow.targetPortalImageReady = false;\r\ntargetPortalImage.onload = () => window.targetPortalImageReady = true;\r\n\r\n// Preload Room Wormhole Image\r\nconst roomWormholeImage = new Image();\r\nroomWormholeImage.src = \"https://raw.githubusercontent.com/Feldob66/WormHole/refs/heads/main/Wormholes.png\";\r\nwindow.roomWormholeImage = roomWormholeImage;\r\nwindow.roomWormholeImageReady = false;\r\nroomWormholeImage.onload = () => window.roomWormholeImageReady = true;\r\n\r\nfunction WHdebugLog(message: unknown) {\r\n    if (window.WHdebugMode) {\r\n        console.log(message);\r\n    }\r\n}\r\n\r\n//Custom addon function #1\r\nfunction joinWormhole(roomName: string) {\r\n    if (\"\" == roomName || !roomName) { return; }\r\n    if (ChatRoomData?.Name) {\r\n        ChatRoomSendLocal(\"Sending search request for room: \" + roomName, 6600);\r\n        window.targetedRoom = roomName;\r\n        window.oldRoomName = ChatRoomData.Name;\r\n        window.oldRoomSpace = ChatRoomData.Space;\r\n        window.serverAnswered = false;\r\n        window.wormHoleSearch = true;\r\n        ServerSend(\"ChatRoomSearch\", { Query: roomName.toUpperCase(), Language: \"\", Space: ChatRoomData.Space, Game: \"\", FullRooms: true, ShowLocked: true });\r\n    } else if (window.oldRoomName != \"\" && [\"\", \"X\", \"M\"].includes(window.oldRoomSpace)) {\r\n        ChatRoomSendLocal(\"Sending search request for room: \" + roomName, 6600); //we need to get to at least here...\r\n        window.targetedRoom = roomName;\r\n        window.serverAnswered = false;\r\n        window.wormHoleSearch = true;\r\n        ServerSend(\"ChatRoomSearch\", { Query: roomName.toUpperCase(), Language: \"\", Space: window.oldRoomSpace, Game: \"\", FullRooms: true, ShowLocked: true });\r\n        window.oldRoomName = \"\";\r\n        window.oldRoomSpace = undefined;\r\n    }\r\n}\r\n//register coordinate wormhole\r\nfunction registerCoordWormhole(X: number, Y: number, RoomName: string) {\r\n    if (!ChatRoomData?.Admin?.includes(Player.MemberNumber) || ChatRoomData.Name == RoomName) {\r\n        if (!ChatRoomData?.Admin?.includes(Player.MemberNumber)) {\r\n            ChatRoomSendLocal(\"You need to be an admin to register a wormhole.\", 6600)\r\n        } else {\r\n            ChatRoomSendLocal(\"You can't register a wormhole with this room as the target.\", 6600)\r\n        }\r\n        return;\r\n    }\r\n    // Validate inputs first\r\n    if (!CommonIsInteger(X, 0, 39) ||\r\n        !CommonIsInteger(Y, 0, 39) ||\r\n        typeof RoomName !== \"string\" ||\r\n        RoomName.length > 20) {\r\n        ChatRoomSendLocal(\"Invalid wormhole coordinates or room name.\\nMake sure X and Y are between 0-39 and room name is under 20 characters.\", 6600);\r\n        return;\r\n    }\r\n    if (ChatRoomData.Custom == null || !ChatRoomData?.Custom?.WormholeList || !ChatRoomData?.Custom.WormholeList?.Coords) {\r\n        initializeWormholeType(\"Coords\");\r\n        WHdebugLog(\"WormholeList.Coords initialized.\")\r\n    }\r\n    if (ChatRoomData.Custom.WormholeList.Coords.find(e => e.X === X && e.Y === Y && e.RoomName === RoomName)) {\r\n        ChatRoomSendLocal(\"Wormhole already exists.\", 6600)\r\n        return;\r\n    }\r\n    const existingCoordIndex = ChatRoomData.Custom.WormholeList.Coords.findIndex(e => e.X === X && e.Y === Y);\r\n    if (existingCoordIndex !== -1) {\r\n        if (ChatRoomData.Custom.WormholeList?.Coords?.[existingCoordIndex] && ChatRoomData.Custom.WormholeList?.Coords?.[existingCoordIndex]?.RoomName !== RoomName) {\r\n            // Edit wormhole with matching coordinates\r\n            ChatRoomData.Custom.WormholeList.Coords[existingCoordIndex].RoomName = RoomName;\r\n            //server room update\r\n            const UpdatedRoom = ChatRoomGetSettings(ChatRoomData);\r\n            UpdatedRoom.Custom = ChatRoomData.Custom;\r\n            ServerSend(\"ChatRoomAdmin\", { MemberNumber: Player.ID, Room: UpdatedRoom, Action: \"Update\" });\r\n            ChatRoomSendLocal(\"Wormhole edited successfully.\", 6600)\r\n            return;\r\n        }\r\n    }\r\n    //register in the new wormhole\r\n    ChatRoomData.Custom.WormholeList.Coords.push({ X: X, Y: Y, RoomName: RoomName });\r\n    const UpdatedRoom = ChatRoomGetSettings(ChatRoomData);\r\n    UpdatedRoom.Custom = ChatRoomData.Custom;\r\n    ServerSend(\"ChatRoomAdmin\", { MemberNumber: Player.ID, Room: UpdatedRoom, Action: \"Update\" });\r\n    ChatRoomSendLocal(\"Wormhole registered successfully.\", 6600)\r\n}\r\n//register chat trigger wormhole\r\nfunction registerChatTriggerWormhole(TriggerWord: string, RoomName: string) {\r\n    if (!ChatRoomData?.Admin?.includes(Player.MemberNumber) || ChatRoomData.Name == RoomName) {\r\n        if (!ChatRoomData?.Admin?.includes(Player.MemberNumber)) {\r\n            ChatRoomSendLocal(\"You need to be an admin to register a wormhole.\", 6600)\r\n        } else {\r\n            ChatRoomSendLocal(\"You can't register a wormhole with this room as the target.\", 6600)\r\n        }\r\n        return;\r\n    }\r\n    // Validate inputs first\r\n    if (typeof TriggerWord !== \"string\" ||\r\n        typeof RoomName !== \"string\" ||\r\n        RoomName.length > 20) {\r\n        ChatRoomSendLocal(\"Invalid wormhole room name.\", 6600);\r\n        return;\r\n    }\r\n    if (ChatRoomData.Custom == null || !ChatRoomData?.Custom?.WormholeList || !ChatRoomData?.Custom.WormholeList?.ChatTriggers) {\r\n        initializeWormholeType(\"ChatTriggers\");\r\n        ChatRoomSendLocal(\"WormholeList.ChatTriggers initialized.\", 6600)\r\n    }\r\n    const existingSourceIndex = ChatRoomData.Custom.WormholeList.ChatTriggers.findIndex(e => e.TriggerWord === TriggerWord);\r\n    if (existingSourceIndex !== -1 && ChatRoomData.Custom.WormholeList.ChatTriggers[existingSourceIndex] && ChatRoomData.Custom.WormholeList?.ChatTriggers?.[existingSourceIndex]?.RoomName !== RoomName) {\r\n        // If trigger word exists, update its target room\r\n        ChatRoomData.Custom.WormholeList.ChatTriggers[existingSourceIndex].RoomName = RoomName;\r\n        const UpdatedRoom = ChatRoomGetSettings(ChatRoomData);\r\n        UpdatedRoom.Custom = ChatRoomData.Custom;\r\n        ServerSend(\"ChatRoomAdmin\", { MemberNumber: Player.ID, Room: UpdatedRoom, Action: \"Update\" });\r\n        ChatRoomSendLocal(\"Wormhole edited successfully.\", 6600)\r\n        return;\r\n    }\r\n    //register in the new wormhole\r\n    ChatRoomData.Custom.WormholeList.ChatTriggers.push({ TriggerWord: TriggerWord, RoomName: RoomName });\r\n    const UpdatedRoom = ChatRoomGetSettings(ChatRoomData);\r\n    UpdatedRoom.Custom = ChatRoomData.Custom;\r\n    ServerSend(\"ChatRoomAdmin\", { MemberNumber: Player.ID, Room: UpdatedRoom, Action: \"Update\" });\r\n    ChatRoomSendLocal(\"Wormhole registered.\", 6600)\r\n}\r\n//register teleport wormhole\r\nfunction registerTeleportWormhole(X: number, Y: number, TargetX: number, TargetY: number, backWards: boolean = false) {\r\n    if (!ChatRoomData?.Admin?.includes(Player.MemberNumber)) {\r\n        ChatRoomSendLocal(\"You need to be an admin to register a wormhole.\", 6600)\r\n        return;\r\n    }\r\n    // Validate inputs first\r\n    if (!CommonIsInteger(X, 0, 39) ||\r\n        !CommonIsInteger(Y, 0, 39) ||\r\n        !CommonIsInteger(TargetX, 0, 39) ||\r\n        !CommonIsInteger(TargetY, 0, 39) ||\r\n        typeof backWards !== \"boolean\") {\r\n        ChatRoomSendLocal(\"Invalid wormhole coordinates.\\nMake sure X, Y, TargetX, TargetY are between 0-39 and backWards is a boolean.\", 6600);\r\n        return;\r\n    }\r\n    // Check if source equals target\r\n    if (X === TargetX && Y === TargetY) {\r\n        ChatRoomSendLocal(\"Source and target coordinates cannot be the same.\", 6600);\r\n        return;\r\n    }\r\n    if (!ChatRoomData.Custom?.WormholeList?.Teleports) {\r\n        initializeWormholeType(\"Teleports\");\r\n        WHdebugLog(\"WormholeList.Teleports initialized.\")\r\n    }\r\n    const Teleports = ChatRoomData.Custom.WormholeList.Teleports;\r\n    // Check if exact teleport already exists\r\n    if (Teleports.find(e => e.X === X && e.Y === Y && e.TargetX === TargetX && e.TargetY === TargetY && e.backWards === backWards)) {\r\n        ChatRoomSendLocal(\"This exact wormhole already exists.\", 6600)\r\n        return;\r\n    }\r\n    // Check for target sharing rules when trying to enable backwards compatibility\r\n    const TeleportsMinusOriginal = Teleports.filter(e => e.X !== X || e.Y !== Y);\r\n    if (backWards && TeleportsMinusOriginal.find(e => e.TargetX === TargetX && e.TargetY === TargetY)) {\r\n        ChatRoomSendLocal(\"Cannot make teleport backwards compatible when target is shared by multiple teleports.\", 6600);\r\n        return;\r\n    }\r\n    // Find existing teleport with same source coordinates for editing\r\n    const existingSourceIndex = Teleports.findIndex(e => e.X === X && e.Y === Y);\r\n    if (existingSourceIndex !== -1 && Teleports[existingSourceIndex]) {\r\n        let existingSourceEdited = false;\r\n        if (Teleports?.[existingSourceIndex]?.TargetX !== TargetX || Teleports?.[existingSourceIndex]?.TargetY === TargetY) {\r\n            // If target coordinates are different, edit existing source teleport\r\n            Teleports[existingSourceIndex].TargetX = TargetX;\r\n            Teleports[existingSourceIndex].TargetY = TargetY;\r\n            existingSourceEdited = true;\r\n        }\r\n        if (Teleports[existingSourceIndex].backWards !== backWards) {\r\n            // If backwards compatibility is different, edit existing source teleport\r\n            Teleports[existingSourceIndex].backWards = backWards;\r\n            existingSourceEdited = true;\r\n        }\r\n        // Allow editing target or backwards compatibility\r\n        if (existingSourceEdited) {\r\n            const UpdatedRoom = ChatRoomGetSettings(ChatRoomData);\r\n            UpdatedRoom.Custom = ChatRoomData.Custom;\r\n            ServerSend(\"ChatRoomAdmin\", { MemberNumber: Player.ID, Room: UpdatedRoom, Action: \"Update\" });\r\n            ChatRoomSendLocal(\"Wormhole edited successfully.\", 6600)\r\n            return;\r\n        }\r\n    }\r\n    // Add new teleport\r\n    Teleports.push({ X: X, Y: Y, TargetX: TargetX, TargetY: TargetY, backWards: backWards });\r\n    const UpdatedRoom = ChatRoomGetSettings(ChatRoomData);\r\n    UpdatedRoom.Custom = ChatRoomData.Custom;\r\n    ServerSend(\"ChatRoomAdmin\", { MemberNumber: Player.ID, Room: UpdatedRoom, Action: \"Update\" });\r\n    ChatRoomSendLocal(\"Wormhole registered successfully.\", 6600)\r\n}\r\n//validation teleports\r\nfunction isValidTeleport(teleport: { X: number; Y: number; TargetX: number; TargetY: number; backWards: boolean } | undefined) {\r\n    if (!teleport) return false;\r\n    return CommonIsInteger(teleport.X, 0, 39) &&\r\n        CommonIsInteger(teleport.Y, 0, 39) &&\r\n        CommonIsInteger(teleport.TargetX, 0, 39) &&\r\n        CommonIsInteger(teleport.TargetY, 0, 39) &&\r\n        typeof teleport.backWards === \"boolean\";\r\n}\r\n//validation coords\r\nfunction isValidCoord(coord: { X: number; Y: number; RoomName: string } | undefined) {\r\n    if (!coord) return false;\r\n    return CommonIsInteger(coord.X, 0, 39) &&\r\n        CommonIsInteger(coord.Y, 0, 39) &&\r\n        typeof coord.RoomName === \"string\" &&\r\n        coord.RoomName.length <= 20;\r\n}\r\n//validation chat triggers\r\nfunction isValidChatTrigger(trigger: { TriggerWord: string; RoomName: string } | undefined) {\r\n    if (!trigger) return false;\r\n    return typeof trigger.TriggerWord === \"string\" &&\r\n        typeof trigger.RoomName === \"string\" &&\r\n        trigger.RoomName.length <= 20;\r\n}\r\n//safety initializations\r\nfunction initializeWormholeType(type: \"Coords\" | \"Teleports\" | \"ChatTriggers\") {\r\n    if (!ChatRoomData || !ChatRoomData?.Admin?.includes(Player.MemberNumber)) return;\r\n    window.changeDone = false;\r\n    if (!ChatRoomData.Custom) {\r\n        ChatRoomData.Custom = {\r\n            WormholeList: {\r\n                Coords: [],\r\n                Teleports: [],\r\n                ChatTriggers: []\r\n            }\r\n        };\r\n        window.changeDone = true;\r\n    }\r\n    if (!ChatRoomData.Custom.WormholeList[type]) {\r\n        ChatRoomData.Custom.WormholeList[type] = [];\r\n        window.changeDone = true;\r\n    }\r\n    if (!ChatRoomData.Custom.WormholeList[type]) {\r\n        ChatRoomData.Custom.WormholeList[type] = [];\r\n        window.changeDone = true;\r\n    }\r\n\r\n    if (window.changeDone) {\r\n        const UpdatedRoom = ChatRoomGetSettings(ChatRoomData);\r\n        UpdatedRoom.Custom = ChatRoomData.Custom;\r\n        /*Remove double updates to the chatroom when registering the very first wormhole of each type\r\n        ServerSend(\"ChatRoomAdmin\", { MemberNumber: Player.ID, Room: UpdatedRoom, Action: \"Update\" });*/\r\n        ChatRoomSendLocal(`${type} initialized.`, 6600);\r\n    }\r\n}\r\n//function for bools validation/registration\r\nfunction validateWormholeTriggers() {\r\n    //initialize wormhole settings at first run as true\r\n    if (!Player.OnlineSharedSettings.WormholeTriggers) {\r\n        Player.OnlineSharedSettings.WormholeTriggers = {\r\n            TeleportsTrigger: true,\r\n            ChatTriggersTrigger: true,\r\n            CoordsTrigger: true\r\n        };\r\n        ServerAccountUpdate.QueueData({ OnlineSharedSettings: Player.OnlineSharedSettings }, true);\r\n        return;\r\n    }\r\n    // Check and fix boolean values\r\n    let needsUpdate = false;\r\n    const wormHoleSettings = (Player.OnlineSharedSettings.WormholeTriggers ?? {\r\n        ChatTriggersTrigger: [],\r\n        CoordsTrigger: [],\r\n        TeleportsTrigger: []\r\n    });\r\n    if (typeof wormHoleSettings.TeleportsTrigger !== 'boolean') {\r\n        wormHoleSettings.TeleportsTrigger = false;\r\n        needsUpdate = true;\r\n    }\r\n    if (typeof wormHoleSettings.ChatTriggersTrigger !== 'boolean') {\r\n        wormHoleSettings.ChatTriggersTrigger = false;\r\n        needsUpdate = true;\r\n    }\r\n    if (typeof wormHoleSettings.CoordsTrigger !== 'boolean') {\r\n        wormHoleSettings.CoordsTrigger = false;\r\n        needsUpdate = true;\r\n    }\r\n    if (needsUpdate) {\r\n        Player.OnlineSharedSettings.WormholeTriggers = wormHoleSettings;\r\n        ServerAccountUpdate.QueueData({ OnlineSharedSettings: Player.OnlineSharedSettings }, true);\r\n    }\r\n}\r\n//init for safe addon loading\r\nfunction initWait() {\r\n    if (CurrentScreen == null || CurrentScreen === \"Login\") {\r\n        WH_API.hookFunction(\"LoginResponse\", 0, (args: any, next: (...args: any[]) => any) => {\r\n            next(args);\r\n            const response = args[0];\r\n            if (response && typeof response.Name === \"string\" && typeof response.AccountName === \"string\") {\r\n                init();\r\n            }\r\n        });\r\n    } else {\r\n        init();\r\n    }\r\n}\r\n\r\nfunction init() {\r\n    // Initialize our default settings if they don't exist\r\n    validateWormholeTriggers();\r\n    //#1 ChatSearchResponse listener | Safer handling\r\n    WH_API.hookFunction('ChatSearchResponse', 4, (args: any, next: (...args: any[]) => any) => {\r\n        var data = args[0];\r\n        if (typeof data !== \"string\") next(args);\r\n        //custom code\r\n        if (window.wormHoleSearch) {\r\n            WHdebugLog(data)\r\n            if (data == \"RoomBanned\") {\r\n                joinWormhole(window.oldRoomName);\r\n                setTimeout(() => {\r\n                    window.oldRoomName = \"\";\r\n                    ChatRoomSendLocal(\"You have been banned from the connected/linked room.\", 6600)\r\n                }, 6600);\r\n                return;\r\n            } else if (data == \"RoomLocked\") {\r\n                WHdebugLog(\"Attempting to rejoin old room: \" + window.oldRoomName);\r\n                joinWormhole(window.oldRoomName);\r\n                setTimeout(() => {\r\n                    window.oldRoomName = \"\";\r\n                    ChatRoomSendLocal(\"The room you tried to join is locked and you don't meet the join requirements.\")\r\n                }, 6600);\r\n                return; // Ensure we return here to prevent further execution\r\n            } else if (data == \"CannotFindRoom\") {\r\n                ChatRoomSendLocal(\"The room you are trying to join does not exist.\", 6600)\r\n            } else if (data == \"JoinedRoom\") {\r\n                //ChatRoomSendLocal(\"You have joined the connected/linked room.\", 6600)\r\n                window.wormHoleSearch = false;\r\n            } else if (data == \"RoomKicked\") {\r\n                ChatRoomSendLocal(\"You have been kicked from the connected/linked room recently.\", 6600)\r\n            } else {\r\n                WHdebugLog(\"Unhandled response for: (\" + data + \")\")\r\n            }\r\n            window.wormHoleSearch = false;\r\n            return;\r\n        } else {\r\n            //custom code\r\n            next(args);\r\n        }\r\n    });\r\n    //#2 Arrow Movement Listener\r\n    WH_API.hookFunction('ChatRoomMapViewMovementProcess', 4, (args: any, next: (...args: any[]) => any) => {\r\n        let posX: number | undefined, posY: number | undefined;\r\n        if (Player.MapData?.Pos) {\r\n            posX = Player.MapData.Pos.X;\r\n            posY = Player.MapData.Pos.Y;\r\n        }\r\n        const ret = next(args);\r\n        if (\r\n            posX !== undefined && posY !== undefined &&\r\n            (posX !== Player.MapData?.Pos?.X || posY !== Player.MapData?.Pos?.Y)\r\n        ) {\r\n            //custom code\r\n            const movedToX = Player.MapData?.Pos?.X;\r\n            const movedToY = Player.MapData?.Pos?.Y;\r\n            WHdebugLog(\"Teleported to: \" + movedToX + \",\" + movedToY)\r\n\r\n            let coordMatch = false;\r\n            let teleportMatch = false;\r\n\r\n            // Check coordinates wormholes\r\n            if (ChatRoomData && ChatRoomData.Custom && ChatRoomData.Custom?.WormholeList &&\r\n                ChatRoomData.Custom?.WormholeList?.Coords &&\r\n                Player.OnlineSharedSettings.WormholeTriggers?.CoordsTrigger === true &&\r\n                !window.teleportedByWormhole) {\r\n\r\n                const CoordWormholes = ChatRoomData.Custom.WormholeList.Coords;\r\n                if (CoordWormholes?.length >= 1) {\r\n                    for (let W in CoordWormholes) {\r\n                        if (CoordWormholes[W] && movedToX == CoordWormholes[W].X && movedToY == CoordWormholes[W].Y) {\r\n                            joinWormhole(CoordWormholes[W].RoomName);\r\n                            coordMatch = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Check teleport wormholes\r\n            if (ChatRoomData && ChatRoomData.Custom && ChatRoomData.Custom?.WormholeList &&\r\n                ChatRoomData.Custom?.WormholeList?.Teleports &&\r\n                Player?.OnlineSharedSettings?.WormholeTriggers?.TeleportsTrigger &&\r\n                !window.teleportedByWormhole) {\r\n\r\n                const Teleports = ChatRoomData.Custom.WormholeList.Teleports;\r\n                if (Teleports?.length >= 1) {\r\n                    for (let W in Teleports) {\r\n                        if (\r\n                            Teleports[W] &&\r\n                            typeof Teleports[W].X === \"number\" &&\r\n                            typeof Teleports[W].Y === \"number\" &&\r\n                            movedToX === Teleports[W].X &&\r\n                            movedToY === Teleports[W].Y\r\n                        ) {\r\n                            // Teleport to target coordinates\r\n                            window.teleportedByWormhole = true;\r\n                            if (\r\n                                Player.MapData &&\r\n                                Player.MapData.Pos &&\r\n                                typeof Teleports[W].TargetX === \"number\" &&\r\n                                typeof Teleports[W].TargetY === \"number\"\r\n                            ) {\r\n                                Player.MapData.Pos.X = Teleports[W].TargetX;\r\n                                Player.MapData.Pos.Y = Teleports[W].TargetY;\r\n                                ChatRoomMapViewUpdatePlayerFlag(-ChatRoomMapViewUpdatePlayerTime);\r\n                                teleportMatch = true;\r\n                                break;\r\n                            }\r\n                        } else if (\r\n                            Teleports[W] &&\r\n                            Teleports[W].backWards &&\r\n                            typeof Teleports[W].TargetX === \"number\" &&\r\n                            typeof Teleports[W].TargetY === \"number\" &&\r\n                            movedToX === Teleports[W].TargetX &&\r\n                            movedToY === Teleports[W].TargetY\r\n                        ) {\r\n                            // If backwards compatible and on target coordinates, teleport back to source\r\n                            window.teleportedByWormhole = true;\r\n                            if (\r\n                                Player.MapData &&\r\n                                Player.MapData.Pos &&\r\n                                typeof Teleports[W].X === \"number\" &&\r\n                                typeof Teleports[W].Y === \"number\"\r\n                            ) {\r\n                                Player.MapData.Pos.X = Teleports[W].X;\r\n                                Player.MapData.Pos.Y = Teleports[W].Y;\r\n                                ChatRoomMapViewUpdatePlayerFlag(-ChatRoomMapViewUpdatePlayerTime);\r\n                                teleportMatch = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (!coordMatch && !teleportMatch && window.teleportedByWormhole) {\r\n                        window.teleportedByWormhole = false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            //custom code\r\n        }\r\n        return ret;\r\n    });\r\n    //#3 Chat Listener | Handle ChatTrigger teleports\r\n    WH_API.hookFunction(\"ChatRoomMessage\", 0, async (args: any, next: (...args: any[]) => any) => {\r\n        //custom code\r\n        var data = args[0];\r\n        let ignoredTypes = [\"Hidden\", \"Status\", \"Action\", \"Activity\", \"LocalMessage\"];\r\n        if (data && data.Sender == Player.MemberNumber && !ignoredTypes.includes(data.Type)) {\r\n            WHdebugLog(data)\r\n            //check all the chat triggers\r\n            if (ChatRoomData && ChatRoomData.Custom?.WormholeList?.ChatTriggers && Player?.OnlineSharedSettings?.WormholeTriggers?.ChatTriggersTrigger) {\r\n                const ChatTriggers = ChatRoomData.Custom.WormholeList.ChatTriggers;\r\n                if (ChatTriggers.length < 1) { return next(args); }\r\n                for (let W in ChatTriggers) {\r\n                    if (ChatTriggers[W] && typeof ChatTriggers[W].TriggerWord === \"string\" && data.Content.includes(ChatTriggers[W].TriggerWord)) {\r\n                        joinWormhole(ChatTriggers[W].RoomName);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //custom code\r\n        next(args);\r\n    });\r\n    //#4 ChatRoomSync Listener | Handle room entry\r\n    // this is just undefined because we don't have mod sdk installed\r\n    WH_API.hookFunction('ChatRoomSync', 4, (args: any, next: (...args: any[]) => any) => {\r\n        const ret = next(args);\r\n        //custom code\r\n        if (!ChatRoomData) {\r\n            // We had to leave the room for some reason\r\n            return ret;\r\n        }\r\n        // Now you can check ChatRoomData\r\n        if (ChatRoomData?.Custom?.WormholeList?.ChatTriggers && Player.OnlineSharedSettings.WormholeTriggers?.ChatTriggersTrigger) {\r\n            //need to verify the chatroom's chat triggers, then fix and list them\r\n            let ChatTriggers = ChatRoomData.Custom.WormholeList.ChatTriggers;\r\n            if (ChatTriggers && ChatTriggers.length > 0) {\r\n                let triggerList = \"\";\r\n                for (let W in ChatTriggers) {\r\n                    if (ChatTriggers[W]) {\r\n                        triggerList += ChatTriggers[W].TriggerWord + \" -> \" + ChatTriggers[W].RoomName + \"\\n\";\r\n                    }\r\n                }\r\n                //timeout of 360ms to only show it after the other stuff being added to chat by default\r\n                setTimeout(() => {\r\n                    ChatRoomSendLocal(\"Chat triggers:\\n\" + triggerList, 6600)\r\n                }, 360);\r\n            }\r\n        }\r\n        //custom code\r\n        return ret;\r\n    });\r\n    //#5 ChatRoomList receiver | Handle room list | ChatSearchResultResponse\r\n    WH_API.hookFunction('ChatSearchResultResponse', 4, (args: any, next: (...args: any[]) => any) => {\r\n        const data = args[0];\r\n        if (!window.serverAnswered) {\r\n            ChatSearchResult = data;\r\n            window.serverAnswered = true;\r\n            WHdebugLog(ChatSearchResult);\r\n            let targetRoom = ChatSearchResult.find(room => room.Name.toUpperCase() == window.targetedRoom.toUpperCase());\r\n            if (targetRoom) {\r\n                WHdebugLog(targetRoom);\r\n                if (targetRoom.MemberCount >= targetRoom.MemberLimit) {\r\n                    ChatRoomSendLocal(\"Target room is Full.\");\r\n                    window.wormHoleSearch = false; // Reset flag\r\n                } else {\r\n                    ChatRoomSendLocal(\"Joining target room.\");\r\n                    window.wormHoleSearch = true;\r\n                    ChatRoomLeave();\r\n                    CommonSetScreen(\"Online\", \"ChatSearch\");\r\n                    ServerSend(\"ChatRoomJoin\", { Name: targetRoom.Name });\r\n                }\r\n            } else {\r\n                ChatRoomSendLocal(\"Target room (\" + window.targetedRoom + \") Not Found.\");\r\n                window.wormHoleSearch = false; // Reset flag\r\n            }\r\n        } else {\r\n            return next(args);\r\n        }\r\n    });\r\n    //#6 Handing Being pushed by a wall or a player | Quicker teleport ready-ness without getting stuck in a back and forth teleport loop.\r\n    WH_API.hookFunction('ChatRoomMapViewUpdatePlayerFlag', 4, (args: any, next: (...args: any[]) => any) => {\r\n        const ret = next(args);\r\n        if (window.teleportedByWormhole) {\r\n            setTimeout(() => {\r\n                window.teleportedByWormhole = false;\r\n            }, 36);\r\n        }\r\n        return ret;\r\n    });\r\n    //#7 Handle translation search freaking out.\r\n    //the function is: function CommonFetch(request)\r\n    WH_API.hookFunction('CommonFetch', 4, (args: any, next: (...args: any[]) => any) => {\r\n        let request: RequestInfo | URL = args[0];\r\n        const url = request instanceof Request ? request.url : request.toString();\r\n        const reply: Response = new Response(\"\", { status: 200 });\r\n\r\n        WHdebugLog(request);\r\n        if (url.includes(\"Wormholes\")) {\r\n            return reply;\r\n        }\r\n        return next(args);\r\n    });\r\n    //#7 Make sure, that /mapcopy also copies over the wormhole list\r\n    WH_API.hookFunction('ChatRoomMapViewCopy', 4, (args: any, next: (...args: any[]) => any) => {\r\n        // Make sure there's a valid map to copy first\r\n        if ((ChatRoomData == null) || (ChatRoomData.MapData == null) || (ChatRoomData.MapData.Type == null) || (ChatRoomData.MapData.Type == \"Never\")) {\r\n            ChatRoomSendLocal(TextGet(\"MapCopyError\"));\r\n            return;\r\n        }\r\n        WHdebugLog(ChatRoomData.MapData)\r\n        //create a new array for the expanded map data\r\n        let expandedMapData = ChatRoomData.MapData;\r\n        const wormholeList = ChatRoomData.Custom?.WormholeList ?? { Coords: [], Teleports: [], ChatTriggers: [] };\r\n        WHdebugLog(wormholeList)\r\n        // Stringify and compress the map in a string\r\n        let S = JSON.stringify(expandedMapData);\r\n        WHdebugLog(S)\r\n        S = LZString.compressToBase64(S);\r\n        navigator.clipboard.writeText(S);\r\n        ChatRoomSendLocal(TextGet(\"MapCopyDone\"));\r\n    });\r\n    //#8 Make sure to, if there is wormhole data, to copy it over to the new map\r\n    WH_API.hookFunction('ChatRoomMapViewPaste', 4, (args: any, next: (...args: any[]) => any) => {\r\n        //define the Param variable\r\n        let Param = args[0];\r\n        // Validates the data first\r\n        if (typeof Param !== \"string\" || Param.length === 0) {\r\n            ChatRoomSendLocal(TextGet(\"MapPasteError\"));\r\n            return;\r\n        }\r\n\r\n        // Only admins can paste/edit the map\r\n        if (!ChatRoomPlayerIsAdmin()) {\r\n            ChatRoomSendLocal(TextGet(\"MapPasteAdmin\"));\r\n            return;\r\n        }\r\n\r\n        // Try to decompress the data\r\n        let DecompressedData = null;\r\n        try {\r\n            DecompressedData = LZString.decompressFromBase64(Param);\r\n        } catch (err) {\r\n            DecompressedData = null;\r\n        }\r\n\r\n        // If we failed to decompress\r\n        if (DecompressedData == null) {\r\n            ChatRoomSendLocal(TextGet(\"MapPasteError\"));\r\n            return;\r\n        }\r\n\r\n        // Tries to get the map data object\r\n        let MapData = null;\r\n        try {\r\n            MapData = JSON.parse(DecompressedData);\r\n        } catch (err) {\r\n            MapData = null;\r\n        }\r\n\r\n        // If the map data is invalid\r\n        if ((MapData == null) || (MapData.Tiles == null)) {\r\n            ChatRoomSendLocal(TextGet(\"MapPasteError\"));\r\n            return;\r\n        }\r\n        let WormholeList = MapData.WormholeList;\r\n        if (WormholeList == null) {\r\n            WormholeList = { Coords: [], Teleports: [], ChatTriggers: [] };\r\n        } else {\r\n            if (ChatRoomData && (ChatRoomData.Custom == undefined || ChatRoomData.Custom == null)) {\r\n                ChatRoomData.Custom = {\r\n                    WormholeList: { Coords: [], Teleports: [], ChatTriggers: [] }\r\n                };\r\n            }\r\n            if (ChatRoomData) {\r\n                ChatRoomData.Custom.WormholeList = WormholeList;\r\n            }\r\n        }\r\n        //remove wormhole data from the map data\r\n        delete MapData.WormholeList;\r\n        // Loads the map and flags it to be refreshed\r\n        if (ChatRoomData) {\r\n            ChatRoomData.MapData = MapData;\r\n            ChatRoomMapViewUpdateFlag();\r\n            ChatRoomMapViewCalculatePerceptionMasks();\r\n            ChatRoomSendLocal(TextGet(\"MapPasteDone\"));\r\n        } else {\r\n            ChatRoomSendLocal(TextGet(\"MapPasteError\"));\r\n        }\r\n    });\r\n    //#9 Map prettify | Draw portal image over Coord or Teleport wormholes\r\n    function WormholeDraw(\r\n        mapX: number,\r\n        mapY: number,\r\n        x: number,\r\n        y: number,\r\n        width: number,\r\n        height: number\r\n    ) {\r\n        const Wormholes = ChatRoomData?.Custom?.WormholeList;\r\n        if (!Wormholes) return;\r\n\r\n        // Room Wormhole (Coord)\r\n        if (\r\n            Wormholes?.Coords?.some(w => w.X === mapX && w.Y === mapY) &&\r\n            window.roomWormholeImageReady\r\n        ) {\r\n            if (window.roomWormholeImage) {\r\n                DrawImageEx(window.roomWormholeImage, MainCanvas, x, y, { Width: width, Height: height });\r\n            }\r\n        }\r\n\r\n        // Teleports (source/target)\r\n        for (const w of Wormholes?.Teleports || []) {\r\n        if (w.X === mapX && w.Y === mapY && window.startingPortalImageReady && window.startingPortalImage) {\r\n                DrawImageEx(window.startingPortalImage, MainCanvas, x, y, { Width: width, Height: height });\r\n            }\r\n\r\n            if (w.TargetX === mapX && w.TargetY === mapY) {\r\n                if (w.backWards && window.backwardsPortalImageReady && window.backwardsPortalImage) {\r\n                    DrawImageEx(window.backwardsPortalImage, MainCanvas, x, y, { Width: width, Height: height });\r\n                } else if (!w.backWards && window.targetPortalImageReady && window.targetPortalImage) {\r\n                    DrawImageEx(window.targetPortalImage, MainCanvas, x, y, { Width: width, Height: height });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    window.WormholeDraw = WormholeDraw;\r\n\r\n    //#9 Map prettify | Draw portal image over Coord or Teleport wormholes\r\n    WH_API.patchFunction(\"ChatRoomMapViewDrawGrid\", {\r\n        \"// For each characters in the chat room (don't draw when there's fog)\":\r\n            `if (!Fog) WormholeDraw(X, Y, Math.floor(TileCanvasX), Math.floor(TileCanvasY), Math.ceil(TileWidth), Math.ceil(TileHeight));`\r\n    });\r\n\r\n\r\n    //command for registering a coordinate wormhole \r\n    CommandCombine([{\r\n        Tag: 'whcoord',\r\n        Description: \"[X] [Y] [RoomName]: Register a coordinate wormhole at X,Y that leads to RoomName\",\r\n        Action: args => {\r\n            const splitArgs = args.split(\" \");\r\n            const roomName = splitArgs.slice(2).join(\" \"); // Handle room names with spaces\r\n\r\n            if (splitArgs.length < 3) {\r\n                ChatRoomSendLocal(\"Usage: /whcoord [X] [Y] [RoomName]\");\r\n                return;\r\n            }\r\n\r\n            const X = splitArgs[0] ? parseInt(splitArgs[0], 10) : 0;\r\n            const Y = splitArgs[1] ? parseInt(splitArgs[1], 10) : 0;\r\n\r\n            registerCoordWormhole(X, Y, roomName);\r\n        }\r\n    }]);\r\n\r\n    //command for registering a chat trigger wormhole\r\n    CommandCombine([{\r\n        Tag: 'whchat',\r\n        Description: \"[TriggerWord] [RoomName]: Register a chat trigger that sends to RoomName when TriggerWord is said\",\r\n        Action: args => {\r\n            const splitPoint = args.indexOf(\" \");\r\n            if (splitPoint === -1) {\r\n                ChatRoomSendLocal(\"Usage: /whchat [TriggerWord] [RoomName]\");\r\n                return;\r\n            }\r\n\r\n            const triggerWord = args.substring(0, splitPoint);\r\n            const roomName = args.substring(splitPoint + 1);\r\n\r\n            registerChatTriggerWormhole(triggerWord, roomName);\r\n        }\r\n    }]);\r\n\r\n    //command for registering a teleport wormhole\r\n    CommandCombine([{\r\n        Tag: 'whteleport',\r\n        Description: \"[X] [Y] [TargetX] [TargetY] [backwards?]: Register a teleport from X,Y to TargetX,TargetY. Optional 'true' for two-way\",\r\n        Action: args => {\r\n            const splitArgs = args.split(\" \");\r\n            if (splitArgs.length < 4) {\r\n                ChatRoomSendLocal(\"Usage: /whteleport [X] [Y] [TargetX] [TargetY] [backwards?]\");\r\n                return;\r\n            }\r\n            const X = parseInt(splitArgs[0] ?? \"0\", 10);\r\n            const Y = parseInt(splitArgs[1] ?? \"0\", 10);\r\n            const TargetX = parseInt(splitArgs[2] ?? \"0\", 10);\r\n            const TargetY = parseInt(splitArgs[3] ?? \"0\", 10);\r\n            const backWards = splitArgs[4] ? splitArgs[4].toLowerCase() === 'true' : false;\r\n            registerTeleportWormhole(X, Y, TargetX, TargetY, backWards);\r\n        }\r\n    }]);\r\n    //command for toggling wormhole trigger bools\r\n    CommandCombine([{\r\n        Tag: 'whtrigger',\r\n        Description: \"[type] [true/false]: Toggle specific wormhole type. Types: coords, teleports, chat\",\r\n        Action: args => {\r\n            const splitArgs = args.toLowerCase().split(\" \");\r\n            if (splitArgs.length !== 2) {\r\n                ChatRoomSendLocal(\"Usage: /whtrigger [type] [true/false]\\nTypes: coords, teleports, chat\");\r\n                return;\r\n            }\r\n\r\n            const type = (splitArgs[0] ?? '') as \"coords\" | \"teleports\" | \"chat\";\r\n            const state = splitArgs[1] === 'true';\r\n\r\n            if (![\"coords\", \"teleports\", \"chat\"].includes(type)) {\r\n                ChatRoomSendLocal(\"Invalid type. Use: coords, teleports, or chat\");\r\n                return;\r\n            }\r\n            // Map command input to settings name\r\n            const triggerMap: Record<\"coords\" | \"teleports\" | \"chat\", \"CoordsTrigger\" | \"TeleportsTrigger\" | \"ChatTriggersTrigger\"> = {\r\n                \"coords\": \"CoordsTrigger\",\r\n                \"teleports\": \"TeleportsTrigger\",\r\n                \"chat\": \"ChatTriggersTrigger\"\r\n            };\r\n\r\n            const trigger = triggerMap[type];\r\n\r\n            if (Player.OnlineSharedSettings.WormholeTriggers?.[trigger]) {\r\n                if (Player.OnlineSharedSettings.WormholeTriggers[trigger] === state) {\r\n                    ChatRoomSendLocal(`Wormholes for ${type} are already ${state ? \"enabled\" : \"disabled\"}.`);\r\n                    return;\r\n                }\r\n                Player.OnlineSharedSettings.WormholeTriggers[trigger] = state;\r\n                ServerAccountUpdate.QueueData({ OnlineSharedSettings: Player.OnlineSharedSettings }, true);\r\n                ChatRoomSendLocal(`Wormholes for ${type} ${state ? \"enabled\" : \"disabled\"}.`);\r\n            }\r\n        }\r\n    }]);\r\n\r\n    CommandCombine([{\r\n        Tag: 'whremove',\r\n        Description: \"[type] [identifier]: Remove a wormhole. Type: coords, teleports, chat\",\r\n        Action: args => {\r\n            const splitArgs = args.split(\" \");\r\n            if (splitArgs.length < 2) {\r\n                ChatRoomSendLocal(\"Usage: /whremove [type] [identifier]\\nTypes: coords, teleports, chat\\nIdentifier format depends on type:\\ncoords: X Y\\nteleports: X Y\\nchat: triggerword\");\r\n                return;\r\n            }\r\n\r\n            const type = splitArgs[0]?.toLowerCase();\r\n            if (type && ![\"coords\", \"teleports\", \"chat\"].includes(type)) {\r\n                ChatRoomSendLocal(\"Invalid type. Use: coords, teleports, or chat\");\r\n                return;\r\n            }\r\n\r\n            if (!ChatRoomData?.Admin?.includes(Player.MemberNumber)) {\r\n                ChatRoomSendLocal(\"You need to be an admin to remove wormholes\");\r\n                return;\r\n            }\r\n\r\n            // Initialize data structure and validate existing entries\r\n            initializeWormholeType(type === \"chat\" ? \"ChatTriggers\" : (type === \"coords\" ? \"Coords\" : \"Teleports\"));\r\n            window.fixedCustomSettings = false;\r\n\r\n            switch (type) {\r\n                case \"coords\": {\r\n                    if (splitArgs.length < 3) {\r\n                        ChatRoomSendLocal(\"For coords type, provide X and Y coordinates\");\r\n                        return;\r\n                    }\r\n                    const X = splitArgs[1] ? parseInt(splitArgs[1], 10) : 0;\r\n                    const Y = splitArgs[2] ? parseInt(splitArgs[2], 10) : 0;\r\n                    let Coords = ChatRoomData?.Custom?.WormholeList?.Coords;\r\n                    if (!Coords) {\r\n                        ChatRoomSendLocal(\"No coordinate wormholes found\", 6600);\r\n                        return;\r\n                    }\r\n                    // Validate all entries first\r\n                    for (let W in Coords) {\r\n                        if (!isValidCoord(Coords[W])) {\r\n                            delete Coords[W];\r\n                            window.fixedCustomSettings = true;\r\n                        }\r\n                    }\r\n                    const index = Coords.findIndex(e => e.X === X && e.Y === Y);\r\n                    if (index === -1) {\r\n                        ChatRoomSendLocal(`No wormhole found at coordinates (${X},${Y})`);\r\n                        return;\r\n                    }\r\n                    Coords.splice(index, 1);\r\n                    break;\r\n                }\r\n                case \"teleports\": {\r\n                    if (splitArgs.length < 3) {\r\n                        ChatRoomSendLocal(\"For teleports type, provide source X and Y coordinates\");\r\n                        return;\r\n                    }\r\n                    const X = splitArgs[1] ? parseInt(splitArgs[1], 10) : 0;\r\n                    const Y = splitArgs[2] ? parseInt(splitArgs[2], 10) : 0;\r\n                    let Teleports = ChatRoomData?.Custom?.WormholeList?.Teleports;\r\n                    if (!Teleports) {\r\n                        ChatRoomSendLocal(\"No teleport wormholes found\");\r\n                        return;\r\n                    }\r\n                    // Validate all entries first\r\n                    for (let W in Teleports) {\r\n                        if (!isValidTeleport(Teleports[W])) {\r\n                            delete Teleports[W];\r\n                            window.fixedCustomSettings = true;\r\n                        }\r\n                    }\r\n                    const index = Teleports.findIndex(e => e.X === X && e.Y === Y);\r\n                    if (index === -1) {\r\n                        ChatRoomSendLocal(`No teleport found at source coordinates (${X},${Y})`);\r\n                        return;\r\n                    }\r\n                    Teleports.splice(index, 1);\r\n                    break;\r\n                }\r\n                case \"chat\": {\r\n                    const triggerWord = splitArgs.slice(1).join(\" \");\r\n                    let ChatTriggers = ChatRoomData?.Custom?.WormholeList?.ChatTriggers;\r\n                    if (!ChatTriggers) {\r\n                        ChatRoomSendLocal(\"No chat triggers found\");\r\n                        return;\r\n                    }\r\n                    // Validate all entries first\r\n                    for (let W in ChatTriggers) {\r\n                        if (!isValidChatTrigger(ChatTriggers[W])) {\r\n                            delete ChatTriggers[W];\r\n                            window.fixedCustomSettings = true;\r\n                        }\r\n                    }\r\n                    const index = ChatTriggers.findIndex(e => e.TriggerWord === triggerWord);\r\n                    if (index === -1) {\r\n                        ChatRoomSendLocal(`No chat trigger found for \"${triggerWord}\"`);\r\n                        return;\r\n                    }\r\n                    ChatTriggers.splice(index, 1);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Update room data after removal and cleanup\r\n            const UpdatedRoom = ChatRoomGetSettings(ChatRoomData);\r\n            UpdatedRoom.Custom = ChatRoomData.Custom;\r\n            ServerSend(\"ChatRoomAdmin\", { MemberNumber: Player.ID, Room: UpdatedRoom, Action: \"Update\" });\r\n            if (window.fixedCustomSettings) {\r\n                ChatRoomSendLocal(\"Invalid entries were removed during cleanup\");\r\n            }\r\n            ChatRoomSendLocal(\"Wormhole removed successfully\");\r\n        }\r\n    }]);\r\n    //command for listing all or specific wormholes\r\n    CommandCombine([{\r\n        Tag: 'wormholes',\r\n        Description: \"[type]: Lists wormholes. Optional type: coords, teleports, chat\",\r\n        Action: args => {\r\n            args = args.toLowerCase().trim();\r\n            if (args && ![\"coords\", \"teleports\", \"chat\"].includes(args)) {\r\n                ChatRoomSendLocal(\"Invalid wormhole type. Use: coords, teleports, or chat\", 6600);\r\n                return;\r\n            }\r\n            let output = \"\";\r\n            // Handle Coordinate Wormholes\r\n            if (!args || args === \"coords\") {\r\n                if (ChatRoomData?.Custom?.WormholeList?.Coords) {\r\n                    initializeWormholeType(\"Coords\");\r\n                    let Coords = ChatRoomData.Custom.WormholeList.Coords;\r\n                    if (Coords.length > 0) {\r\n                        output += \"Coordinate Wormholes:\\n\";\r\n                        for (let W in Coords) {\r\n                            if (Coords[W] && isValidCoord(Coords[W])) {\r\n                                output += `(X: ${Coords[W].X},Y: ${Coords[W].Y}) -> ${Coords[W].RoomName}\\n`;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Handle Teleports\r\n            if (!args || args === \"teleports\") {\r\n                if (ChatRoomData?.Custom?.WormholeList?.Teleports) {\r\n                    initializeWormholeType(\"Teleports\");\r\n                    let Teleports = ChatRoomData.Custom.WormholeList.Teleports;\r\n                    if (Teleports.length > 0) {\r\n                        if (output) output += \"\\n\";\r\n                        output += \"Teleport Wormholes: (Two-way means, that it works backwards too.)\\n\";\r\n                        for (let W in Teleports) {\r\n                            const teleport = Teleports[W];\r\n                            if (teleport && isValidTeleport(teleport)) {\r\n                                output += `(X: ${teleport.X},Y: ${teleport.Y}) -> (X: ${teleport.TargetX},Y: ${teleport.TargetY})${teleport.backWards ? \" (Two-way)\" : \"\"}\\n`;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Handle Chat Triggers\r\n            if (!args || args === \"chat\") {\r\n                if (ChatRoomData?.Custom?.WormholeList?.ChatTriggers) {\r\n                    initializeWormholeType(\"ChatTriggers\");\r\n                    let ChatTriggers = ChatRoomData.Custom.WormholeList.ChatTriggers;\r\n                    if (ChatTriggers.length > 0) {\r\n                        if (output) output += \"\\n\";\r\n                        output += \"Chat Triggers:\\n\";\r\n                        for (let W in ChatTriggers) {\r\n                            if (ChatTriggers[W] && isValidChatTrigger(ChatTriggers[W])) {\r\n                                output += `\"Trigger phrase: ${ChatTriggers[W].TriggerWord}\" -> ${ChatTriggers[W].RoomName}\\n`;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (output !== \"\") {\r\n                //need to remove the last \"\\n\" from the end\r\n                output = output.slice(0, -1);\r\n                ChatRoomSendLocal(output);\r\n            } else {\r\n                ChatRoomSendLocal(\"No wormholes found\" + (args ? ` of type: ${args}` : \"\"));\r\n            }\r\n        }\r\n    }]);\r\n    //help command\r\n    CommandCombine([{\r\n        Tag: 'whhelp',\r\n        Description: \"[command]: Shows help for wormhole commands. Optionally specify a command for detailed help\",\r\n        Action: args => {\r\n            // Check and fix boolean values\r\n            validateWormholeTriggers();\r\n            // Show current trigger states\r\n            let triggerStatus = \"Current Trigger States:\\n\";\r\n            triggerStatus += `Coordinate Wormholes: ${Player.OnlineSharedSettings.WormholeTriggers?.CoordsTrigger ? \"Enabled\" : \"Disabled\"}\\n`;\r\n            triggerStatus += `Teleport Wormholes: ${Player.OnlineSharedSettings.WormholeTriggers?.TeleportsTrigger ? \"Enabled\" : \"Disabled\"}\\n`;\r\n            triggerStatus += `Chat Triggers: ${Player.OnlineSharedSettings.WormholeTriggers?.ChatTriggersTrigger ? \"Enabled\" : \"Disabled\"}\\n`;\r\n\r\n            const commands = {\r\n                \"whcoord\": \"Usage: /whcoord [X] [Y] [RoomName]\\nRegisters a coordinate wormhole at X,Y that leads to RoomName\",\r\n                \"whchat\": \"Usage: /whchat [TriggerWord] [RoomName]\\nRegisters a chat trigger that sends to RoomName when TriggerWord is said\",\r\n                \"whteleport\": \"Usage: /whteleport [X] [Y] [TargetX] [TargetY] [backwards?]\\nRegisters a teleport from X,Y to TargetX,TargetY. Optional 'true' for two-way\",\r\n                \"whtrigger\": \"Usage: /whtrigger [type] [true/false]\\nToggles specific wormhole type. Types: coords, teleports, chat\",\r\n                \"whremove\": \"Usage: /whremove [type] [identifier]\\nRemoves a wormhole. Types: coords, teleports, chat\\nIdentifier format depends on type:\\n- coords: X Y\\n- teleports: X Y\\n- chat: triggerword\",\r\n                \"wormholes\": \"Usage: /wormholes [type]\\nLists all or specific type of wormholes. Optional type: coords, teleports, chat\",\r\n                \"whhelp\": \"Usage: /whhelp [command]\\nShows this help menu or detailed help for a specific command\"\r\n            } as const;\r\n\r\n            args = args.toLowerCase().trim();\r\n            const commandDescription = commands[args as keyof typeof commands] as typeof commands[keyof typeof commands] | undefined;\r\n\r\n            if (commandDescription) {\r\n                // Show detailed help for specific command\r\n                ChatRoomSendLocal(commandDescription);\r\n            } else if (args) {\r\n                ChatRoomSendLocal(\"Unknown command. Available commands: \" + Object.keys(commands).join(\", \"));\r\n            } else {\r\n                // Show general help\r\n                let output = \"Wormhole Commands:\\n\";\r\n                Object.entries(commands).forEach(([cmd, desc]) => {\r\n                    output += `/${cmd}: ${desc.split('\\n')?.[0]?.replace('Usage: /', '')}\\n`;\r\n                });\r\n                output += \"\\nFor detailed help on any command, use: /whhelp [command]\\n\";\r\n                output += \"\\n\" + triggerStatus;\r\n\r\n                // Remove final newline\r\n                output = output.slice(0, -1);\r\n                ChatRoomSendLocal(output);\r\n            }\r\n        }\r\n    }]);\r\n}\r\n\r\n// Start initialization\r\ninitWait();\r\n//------------------------------------------------------------\r\n/*\r\nPlayer.OnlineSharedSettings.WormholeTriggers = {\r\n    TeleportsTrigger: bool,\r\n    ChatTriggersTrigger: bool,\r\n    CoordsTrigger: bool\r\n}\r\n\r\nChatRoomData.Custom.WormholeList = {\r\n    Coords: [\r\n        { X: int, Y: int, RoomName: string }\r\n    ],\r\n    Teleports: [\r\n        { X: int, Y: int, TargetX: int, TargetY: int, backWards: bool }\r\n    ],\r\n    ChatTriggers: [\r\n        { TriggerWord: string, RoomName: string }\r\n    ]\r\n}\r\n*/\r\n//------------------------------------------------------------\r\n// issues\r\n// Room Chat options list is too quick, appears for too short period of time...\r\n\r\n//Hook into ChatRoomAdminCustomization to draw an extra button with our custom image.\r\nWH_API.hookFunction(\"ChatAdminRoomCustomizationRun\", 4, (args: any, next: (...args: any[]) => any) => {\r\n    if (CurrentScreen == 'ChatAdminRoomCustomization') {\r\n        DrawButton(1815, 75, 90, 90, \"\", \"White\", \"https://i.ibb.co/XP4cXNk/Wormholes.png\");\r\n    }\r\n    return next(args);\r\n});\r\n//Hook into Click handler of ChatAdminRoomCustomization\r\nWH_API.hookFunction(\"ChatAdminRoomCustomizationClick\", 0, (args: any, next: (...args: any[]) => any) => {\r\n    if (MouseIn(1815, 75, 90, 90)) {\r\n        CommonSetScreen(\"Online\", \"Wormholes\" as any);\r\n    }\r\n    return next(args);\r\n});\r\n\r\n//------------------------------------------------------------\r\nvar WormholesBackground = \"Sheet\";\r\nwindow.WormholesBackground = WormholesBackground;\r\n\r\nfunction WormholesRun() {\r\n    // Set text alignment for our labels\r\n    MainCanvas.textAlign = \"left\";\r\n\r\n    // Draw the three lines\r\n    DrawText(\"- Teleports:\", 250, 150, \"Black\", \"Gray\");\r\n    DrawText(\"- CoordWormholes:\", 250, 200, \"Black\", \"Gray\");\r\n    DrawText(\"- ChatTriggerWormholes:\", 250, 250, \"Black\", \"Gray\");\r\n\r\n    // Draw the exit button (keeping this part as is)\r\n    MainCanvas.textAlign = \"center\";\r\n    DrawButton(1815, 75, 90, 90, \"\", \"White\", \"Icons/Exit.png\");\r\n}\r\nwindow.WormholesRun = WormholesRun;\r\n\r\nfunction WormholesClick() {\r\n    // When the user exits\r\n    if (MouseIn(1815, 75, 90, 90)) WormholesExit();\r\n}\r\nwindow.WormholesClick = WormholesClick;\r\n\r\nfunction WormholesExit() {\r\n    //WormholesUnload();\r\n    CommonSetScreen(\"Online\", \"ChatAdminRoomCustomization\");\r\n}\r\nwindow.WormholesExit = WormholesExit;\r\n\r\nfunction WormholesLoad() {\r\n    //nothing so far\r\n}\r\nwindow.WormholesLoad = WormholesLoad;\r\n\r\nfunction WormholesUnload() {\r\n    //nothing so far\r\n}\r\nwindow.WormholesUnload = WormholesUnload;\r\n\r\nfunction WormholesDraw() {\r\n    //nothing so far\r\n}\r\nwindow.WormholesDraw = WormholesDraw;"],
  "mappings": "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",
  "names": ["o", "e", "t", "n", "r", "i", "a", "c", "l", "d", "g", "s", "p", "UpdatedRoom"]
}
